Ghana_base <- read_sf("data/geo data/GFW_stats_RESTORE/GFW_stats_RESTORE_Ghana.geojson")
#Roads
roads_gha <- read_sf("data/geo data/ghana_roads/")
#Rivers
rivers <- read_sf("data/geo data/rivers/")
rivers <- st_transform(rivers, crs = 4326)
Ghana_base <- Ghana_base %>%
mutate(road_distance_m = apply(st_distance(Ghana_base, roads_gha), 1, min),
river_distance_m = apply(st_distance(Ghana_base, rivers), 1, min))
soil_erosion <- rast("data/geo data/soil_erosion/global_Erosion_2020.tif")
ghana_outline <- read_sf("data/geo data/Ghana_New_16_Region.geojson")
ghana_outline <- st_transform(ghana_outline, st_crs(soil_erosion))
ghana_outline_vect <- vect(ghana_outline)
cropped_raster <- crop(soil_erosion, ghana_outline_vect)
plot(cropped_raster)
soil_ha <- list()
for (i in 1:nrow(Ghana_base)) {
# Extract the current row and create a 3000m buffer
buffer_sf <- Ghana_base %>%
slice(i) %>%
st_buffer(3000) # 3km buffer
buffer <- vect(buffer_sf) # Convert to SpatVector for raster operations
# Mask the soil erosion raster to the buffer area
soil_mask <- cropped_raster %>%
crop(buffer) %>%
mask(buffer)
# Calculate the average soil erosion within the masked area
soil_quality_average <- tryCatch({
mean(values(soil_mask), na.rm = TRUE) # Get mean of raster values
}, error = function(e) NA) # Handle errors gracefully
# Store the average erosion value for the current buffer
soil_ha[[i]] <- soil_quality_average
}
# Combine results into a data frame
results <- data.frame(
soil_ha = unlist(soil_ha)
)
Ghana_base <- cbind(as.data.frame(Ghana_base), results)
print(Ghana_base)
?try
travel_time <- rast("data/geo data/travel_time_to_major_cities/acc_50k.tif")
cropped_travel <- crop(travel_time, ghana_outline_vect)
raster_temp <- vect(Ghana_base$geometry)
dist_to_city <- extract(cropped_travel,raster_temp)
Ghana_base$travel_time <- dist_to_city[, 2]
#Combine into the same shapefile
for (i in seq_along(file_list)){
temp_sf = read_sf(file_list[i])
combined_sf = rbind(temp_sf, base_sf)
}
file_list <- list.files(path="data/geo data/parks", full.names = TRUE)
#Combine into the same shapefile
for (i in seq_along(file_list)){
temp_sf = read_sf(file_list[i])
combined_sf = rbind(temp_sf, base_sf)
}
base_sf= read_sf("data/geo data/parks/aboniyere.geojson")
#Combine into the same shapefile
for (i in seq_along(file_list)){
temp_sf = read_sf(file_list[i])
combined_sf = rbind(temp_sf, base_sf)
}
combined_sf = bind_rows(temp_sf, base_sf)
View(combined_sf)
#Combine into the same shapefile
for (i in seq_along(file_list)){
temp_sf = read_sf(file_list[i])
combined_sf = bind_rows(temp_sf, base_sf)
}
file_list
file_list <- list.files(path="data/geo data/parks", full.names = TRUE)
bind_rows(file_list)
sf_list <- lapply(file_list, read_sf)
# Combine all sf objects into one
combined_sf <- bind_rows(sf_list)
View(combined_sf)
file_list
length(file_list)
Ghana_base <- Ghana_base %>%
mutate(parks_geometries = combined_sf %>% select(geometry))
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
st_crs(combined_sf)
st_crs(Ghana_base)
st_crs(combined_sf)
st_crs(Ghana_base)
st_crs(combined_sf)
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
combined_sf <- st_set_crs(combined_sf, 4326)  # Set CRS to WGS 84
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
combined_sf <- st_set_crs(combined_sf, 4326)  # Set CRS to WGS 84
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
st_crs(Ghana_base)
st_crs(combined_sf)
combined_sf <- st_set_crs(combined_sf, 4326)  # Set CRS to WGS 84
st_crs(Ghana_base)
combined_sf <- st_set_crs(Ghana_base, 4326)  # Set CRS to WGS 84
plot(ghana_base)
plot(Ghana_base)
class(Ghana_base)
st_geometry(Ghana_base) <- Ghana_base$geometry
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
Ghana_base <- Ghana_base %>%
mutate(closest_park_geom = st_geometry(combined_sf)[nearest_index])
st_write(combined_sf,"data/geo data/parks/aggregate_parks_shapefile.geojson")
combined_sf <- list.files(path = "data/geo data/parks", full.names = TRUE) %>%
lapply(read_sf) %>%
bind_rows() %>%
st_set_crs(4326)
Ghana_base %>%
st_geometry(Ghana_base) <- Ghana_base$geometry %>%
mutate(nearest_index <- st_nearest_feature(Ghana_base, combined_sf,
closest_park_geom = st_geometry(combined_sf)[nearest_index]
))
combined_sf <- list.files(path = "data/geo data/parks", full.names = TRUE) %>%
lapply(read_sf) %>%
bind_rows() %>%
st_set_crs(4326)
Ghana_base <- st_transform(Ghana_base, st_crs(combined_sf))
# Find nearest feature index
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
# Assign nearest park geometries to Ghana_base
Ghana_base <- Ghana_base %>%
mutate(closest_park_geom = st_geometry(combined_sf)[nearest_index])
file_list <- list.files(path="data/geo data/parks", full.names = TRUE)
sf_list <- lapply(file_list, read_sf)
combined_sf <- bind_rows(sf_list)
st_crs(combined_sf)
st_crs(Ghana_base)
combined_sf <- st_set_crs(Ghana_base, 4326)  # Set CRS to WGS 84
st_geometry(Ghana_base) <- Ghana_base$geometry
plot(Ghana_base)
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
st_write(combined_sf,"data/geo data/parks/aggregate_parks_shapefile.geojson")
combined_sf <- list.files(path = "data/geo data/parks", full.names = TRUE) %>%
lapply(read_sf) %>%
bind_rows() %>%
st_set_crs(4326)
Ghana_base <- st_transform(Ghana_base, st_crs(combined_sf))
# Find nearest feature index
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
# Assign nearest park geometries to Ghana_base
Ghana_base <- Ghana_base %>%
mutate(closest_park_geom = st_geometry(combined_sf)[nearest_index])
file_list <- list.files(path="data/geo data/parks", full.names = TRUE)
sf_list <- lapply(file_list, read_sf)
combined_sf <- bind_rows(sf_list)
st_crs(combined_sf)
st_crs(Ghana_base)
combined_sf <- st_set_crs(Ghana_base, 4326)  # Set CRS to WGS 84
st_geometry(Ghana_base) <- Ghana_base$geometry
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
#st_write(combined_sf,"data/geo data/parks/aggregate_parks_shapefile.geojson")
combined_sf <- list.files(path = "data/geo data/parks", full.names = TRUE) %>%
lapply(read_sf) %>%
bind_rows() %>%
st_set_crs(4326)
Ghana_base <- st_transform(Ghana_base, st_crs(combined_sf))
# Find nearest feature index
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
# Assign nearest park geometries to Ghana_base
Ghana_base <- Ghana_base %>%
mutate(closest_park_geom = st_geometry(combined_sf)[nearest_index])
file_list <- list.files(path="data/geo data/parks", full.names = TRUE)
sf_list <- lapply(file_list, read_sf)
combined_sf <- bind_rows(sf_list)
st_crs(combined_sf)
st_crs(Ghana_base)
combined_sf <- st_set_crs(Ghana_base, 4326)  # Set CRS to WGS 84
st_geometry(Ghana_base) <- Ghana_base$geometry
combined_sf <- st_transform(combined_sf, st_crs(Ghana_base))
nearest_index <- st_nearest_feature(Ghana_base, combined_sf)
#st_write(combined_sf,"data/geo data/parks/aggregate_parks_shapefile.geojson")
knitr::opts_knit$set(root.dir = "~/Dropbox/devlab/restore_econ/data/geo data/")
getwd()
options(max.print = 10000)
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(readr)
library(haven)
villages_sample <- read_xls("final_village_sample_FIELDGPS.xls")
villages_GHA <- st_read("Sui Communities")
household_CDI <- read_dta("~/Dropbox/devlab/restore_econ/data/CDI/CDI_VL_clean_nopii.dta")
villages_CDI <- household_CDI %>%
select(region, district, village, community_type, gpslatitude, gpslongitude, gpsaltitude, gpsaccuracy) %>%
st_as_sf(coords = c("gpslongitude", "gpslatitude"), crs = 4326)
### are there any other rows that I need to pull?
### Tianyi's version has an extra email with extra information, do I need to incorporate any extra villages or points
#tree cover loss
cid_loss <- rast("Hansen/Hansen_GFC-2023-v1.11_lossyear_10N_010W.tif")
plot(cid_loss)
#tree cover
cid_cover <- rast("Hansen/Hansen_GFC-2023-v1.11_treecover2000_10N_010W.tif")
plot(cid_cover)
# villages_CDI is final_village
#
#
buffer_ha = list()
tc_2023_ha = list()
loss5_ha = list()
loss10_ha = list()
tc_2023_pct = list()
loss5_pct = list()
loss10_pct = list()
for (i in 1:nrow(villages_CDI)) {
buffer_sf <- villages_CDI %>%
slice(i) %>%
st_buffer(3000)
buffer <- vect(buffer_sf)
# -----------------------------------------------------------------------------
# Mask the rasters to their intersections with buffer_utm
cid_loss_mask <- cid_loss %>%
crop(buffer) %>%
mask(buffer)
cid_cover_mask <- cid_cover %>%
crop(buffer) %>%
mask(buffer)
# -----------------------------------------------------------------------------
# Recode the treecover raster so it's a "greater than or equal to 30" raster
tc_2023 <- ifel(cid_cover_mask >= 30, 1,NA)
# -----------------------------------------------------------------------------
# Recode 2 versions of the cid_loss raster for 5-year and 10-year loss
loss5 = ifel((cid_loss_mask >= 19) & (cid_loss_mask <= 23), 1,NA)
loss10 = ifel((cid_loss_mask >= 14) & (cid_loss_mask <= 23), 1,NA)
# -----------------------------------------------------------------------------
# Total buffer area in hectares
buffer_ha_i <- cid_cover_mask %>% expanse(unit="ha") %>% .$area
buffer_ha[[i]] <- buffer_ha_i
# -----------------------------------------------------------------------------
# Total area covered by each of the 3 rasters
tc_2023_ha_i <- tc_2023 %>% expanse(unit="ha") %>% .$area
tc_2023_ha[[i]] <- tc_2023_ha_i
loss5_ha_i <- loss5 %>% expanse(unit="ha") %>% .$area
loss5_ha[[i]] <- loss5_ha_i
loss10_ha_i <- loss10 %>% expanse(unit="ha") %>% .$area
loss10_ha[[i]] <- loss10_ha_i
# -----------------------------------------------------------------------------
# Area percentages
tc_2023_pct[[i]] <- 100 * (tc_2023_ha_i / buffer_ha_i)
loss5_pct[[i]] <- 100 * (loss5_ha_i / buffer_ha_i)
loss10_pct[[i]] <- 100 * (loss10_ha_i / buffer_ha_i)
}
GFW_stats <- cbind(as.numeric(buffer_ha),
as.numeric(tc_2023_ha),
as.numeric(loss5_ha),
as.numeric(loss10_ha),
as.numeric(tc_2023_pct),
as.numeric(loss5_pct),
as.numeric(loss10_pct))
colnames(GFW_stats) = c("buffer_ha",
"tc_2023_ha",
"loss5_ha",
"loss10_ha",
"tc_2023_pct",
"loss5_pct",
"loss10_pct")
GFW_stats_RESTORE_CDI <- sf:::cbind.sf(villages_CDI,
GFW_stats)
View(GFW_stats_RESTORE_CDI)
write.csv(GFW_stats_RESTORE, file = "~/Dropbox/devlab/restore_econ/data/geo data/GFW_stats_RESTORE_CDI.csv")
View(Ghana_base)
View(combined_sf)
combined_sf <- list.files(path = "data/geo data/parks", full.names = TRUE) %>%
lapply(read_sf) %>%
bind_rows() %>%
st_set_crs(4326)
View(combined_sf)
plot(combined_sf)
ggplot() +
geom_sf(data = Ghana_base, aes(geometry = closest_park_geom), color = "NA") +  # Plot points
geom_sf(data = Ghana_base, aes(geometry = geometry), fill = "blue", alpha = 0.3) +  # Plot parks
theme_minimal()
ggplot() +
geom_sf(data = Ghana_base, aes(geometry = closest_park_geom), color = "NA") +  # Plot points
geom_sf(data = Ghana_base, aes(geometry = geometry), fill = "red", alpha = 0.3) +  # Plot parks
theme_minimal()
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(ggplot2)
library(ggforce)
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024/")
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(ggplot2)
library(ggforce)
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024/")
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024/")
setwd("Dropbox")
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024/")
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(ggplot2)
library(ggforce)
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024/")
lake_data <- st_read("shapefiles/Lake Polygon/NLA_2017_Lake_Polygon.dbf")
gdb_path <- "shapefiles/fef0ad6f-84a0-42e6-942a-ed3172551e0c.gdb"
layers <- st_layers(gdb_path)
ct_lakes <- st_read(gdb_path)
candlewood_bbox <- st_as_sfc(st_bbox(c(
xmin = -73.52,  # Minimum longitude (left)
xmax = -73.42,  # Maximum longitude (right)
ymin = 41.43,   # Minimum latitude (bottom)
ymax = 41.53    # Maximum latitude (top)
), crs = 4326))
ct_lakes <- st_transform(ct_lakes, crs = 4326)
candlewood_lake <- ct_lakes %>%
filter(st_intersects(SHAPE, candlewood_bbox, sparse = FALSE)) %>%
filter(!WBNAME == "Squantz Pond" & SHAPE_Length > 5100)
fivenum(candlewood_lake$SHAPE_Length)
##just a test plot
ggplot() +
geom_sf(data = candlewood_lake, fill = "lightblue", color = "darkblue") +
labs(
title = "Candlewood Lake Base Layer",
x = "Longitude",
y = "Latitude"
) +
theme_minimal()
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(ggplot2)
library(ggforce)
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024/")
transect_list <- list("transect_data/csv/")
View(transect_list)
transect_list <- list(path = "transect_data/csv/", pattern = "\\.csv$", full.names = TRUE))
transect_list <- list(path = "transect_data/csv/", pattern = "\\.csv$", full.names = TRUE)
transect_list <- list(path = "transect_data/csv/", pattern = "\\.csv$", full.names = TRUE)
tramsect_list
transect_list
transect_list <- list(path = "transect_data/csv/", pattern = "\\.csv$", full.names = TRUE)
View(temp_sf)
View(transect_list)
transect_list <- list(path = "transect_data/csv/")
View(transect_list)
transect_list
transect_list <- list.files(path = "transect_data/csv/", pattern = "\\.csv$", full.names = TRUE)
transect_list
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(ggplot2)
library(ggforce)
library(stringr)
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024")
library(tidyverse)
library(sf)
library(matrixStats)  # For doing fast rowwise operations
library(terra)
library(readxl)
library(ggplot2)
library(ggforce)
library(stringr)
setwd("Dropbox/Scuba.Tech/SdT-CT_AIS-Geddy-Winter-2024")
# Read the first file as the base dataset
merged_transect <- read_csv(file_list[1])
merged_transect <- read_csv("merged_transect.csv")
species_data <- merged_transect %>%
relocate(year, .before = 1) %>%  # Move 'year' to the first column
relocate(35, .after = year) %>%
select(year,13:ncol(.)) %>% # Move column 35 next to 'year'
mutate(point_sum = rowSums(across(2:ncol(.)), na.rm = TRUE), ) %>% #sum of all the species within a point
group_by(year) %>% # Sum across columns 12 to end
mutate(yearly_sum = sum(point_sum)) %>%
mutate(potfol_sum = sum(potfol, na.rm = TRUE),
elonut_sum = sum(elonut, na.rm = TRUE),
cerdem_sum = sum(cerdem, na.rm = TRUE),
najfle_sum = sum(najfle, na.rm = TRUE),
potcri_sum = sum(potcri, na.rm = TRUE),
myrspi_sum = sum(myrspi, na.rm = TRUE),
valame_sum = sum(valame, na.rm = TRUE),
najmin_sum = sum(najmin, na.rm = TRUE),
potgra_sum = sum(potgra, na.rm = TRUE),
potper_sum = sum(potper, na.rm = TRUE),
zanpal_sum = sum(zanpal, na.rm = TRUE),
calsp_sum = sum(calsp, na.rm = TRUE),
nymodo_sum = sum(nymodo, na.rm = TRUE),
lemmin_sum = sum(lemmin, na.rm = TRUE),
spipol_sum = sum(spipol, na.rm = TRUE),
stupec_sum = sum(stupec, na.rm = TRUE),
elasp_sum = sum(elasp, na.rm = TRUE),
potbic_sum = sum(potbic, na.rm = TRUE),
potpus_sum = sum(potpus, na.rm = TRUE),
unidentif3_sum = sum(unidentif3, na.rm = TRUE),
elesp_sum = sum(elesp, na.rm = TRUE),
spaspp_sum = sum(spaspp, na.rm = TRUE),
typha_sum = sum(typha, na.rm = TRUE)) %>%
filter(!year == "2007") #filter to year to control for BAD data
other_data <- species_data %>%
select(-c(   "potfol",     "elonut",    "cerdem",     "najfle",     "potcri",     "myrspi",     "valame",     "najmin",  "potgra",     "potper",     "zanpal",     "calsp",      "nymodo",     "lemmin",  "spipol",     "stupec",     "elasp" ,     "potbic",     "potpus",     "unidentif3",  "elesp",      "spaspp",     "typha")) %>%
select(-cerdem_sum, -myrspi_sum) %>%
mutate(
other_sum = rowSums(across(4:23))
) %>%
select(other_sum)
species_data <- cbind(species_data, other_data[-1])
ggplot(data = species_data) +
# Opaque area for "Total" sum
geom_area(aes(x = year, y = yearly_sum, fill = "Total"), alpha = 0.5, show.legend = F) +  # Use fill instead of color
# Line for "Total" sum
geom_line(aes(x = year, y = yearly_sum, color = "Total"), linewidth = 1) +  # Use color, not fill
# Myrspi points and lines
geom_point(aes(x = year, y = myrspi_sum, color = "Eurasian Waterfoil"), size = 1) +
geom_line(aes(x = year, y = myrspi_sum, color = "Eurasian Waterfoil"), linewidth = 1) +
# Cerdem points and lines
geom_point(aes(x = year, y = cerdem_sum, color = "Coontail"), size = 1) +
geom_line(aes(x = year, y = cerdem_sum, color = "Coontail"), linewidth = 1) +
# Other species points and lines
geom_point(aes(x = year, y = other_sum, color = "Other"), size = 1) +
geom_line(aes(x = year, y = other_sum, color = "Other"), linewidth = 1) +
# Define color and fill palettes
scale_color_manual(values = c("Eurasian Waterfoil" = "#E74C3C", "Coontail" = "#3498DB", "Other" = "#27AE60", "Total" = "Grey")) +
scale_fill_manual(values = c("Total" = "#95A5A6")) +  # Opaque gray for total area
# Labels and theme improvements
labs(color = "Species", fill = "Total Area", x = "Year", y = "Relative Sum of Observations",
title = "Candlewood Lake Invasive Species Populations") +
theme_minimal(base_size = 12) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
legend.position = "top"
) +
scale_x_continuous(
breaks = seq(2007.5, 2020, by = 2.5),  # Adjust tick intervals (every 5 years)
labels = c("Jul. 2008", "Aug. 2010", "Aug. 2012", "Aug 2015", "Aug 2017", "Aug 2020")  # Custom labels
)
ggplot(data = species_data) +
# Opaque area for "Total" sum
geom_area(aes(x = year, y = yearly_sum, fill = "Total"), alpha = 0.5, show.legend = F) +  # Use fill instead of color
# Line for "Total" sum
geom_line(aes(x = year, y = yearly_sum, color = "Total"), linewidth = 1) +  # Use color, not fill
# Myrspi points and lines
geom_point(aes(x = year, y = myrspi_sum, color = "Eurasian Waterfoil"), size = 1) +
geom_line(aes(x = year, y = myrspi_sum, color = "Eurasian Waterfoil"), linewidth = 1) +
# Cerdem points and lines
geom_point(aes(x = year, y = cerdem_sum, color = "Coontail"), size = 1) +
geom_line(aes(x = year, y = cerdem_sum, color = "Coontail"), linewidth = 1) +
# Other species points and lines
geom_point(aes(x = year, y = other_sum, color = "Other"), size = 1) +
geom_line(aes(x = year, y = other_sum, color = "Other"), linewidth = 1) +
# Define color and fill palettes
scale_color_manual(values = c("Eurasian Waterfoil" = "#E74C3C", "Coontail" = "#3498DB", "Other" = "#27AE60", "Total" = "Grey")) +
scale_fill_manual(values = c("Total" = "#95A5A6")) +  # Opaque gray for total area
# Labels and theme improvements
labs(color = "Species", fill = "Total Area", x = "Year", y = "Relative Sum of Observations",
title = "Candlewood Lake, CT Invasive Species Populations") +
theme_minimal(base_size = 12) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
legend.position = "top"
) +
scale_x_continuous(
breaks = seq(2007.5, 2020, by = 2.5),  # Adjust tick intervals (every 5 years)
labels = c("Jul. 2008", "Aug. 2010", "Aug. 2012", "Aug 2015", "Aug 2017", "Aug 2020")  # Custom labels
)
lake_data <- st_read("shapefiles/Lake Polygon/NLA_2017_Lake_Polygon.dbf")
gdb_path <- "shapefiles/fef0ad6f-84a0-42e6-942a-ed3172551e0c.gdb"
layers <- st_layers(gdb_path)
ct_lakes <- st_read(gdb_path)
candlewood_bbox <- st_as_sfc(st_bbox(c(
xmin = -73.52,  # Minimum longitude (left)
xmax = -73.42,  # Maximum longitude (right)
ymin = 41.43,   # Minimum latitude (bottom)
ymax = 41.53    # Maximum latitude (top)
), crs = 4326))
ct_lakes <- st_transform(ct_lakes, crs = 4326)
candlewood_lake <- ct_lakes %>%
filter(st_intersects(SHAPE, candlewood_bbox, sparse = FALSE)) %>%
filter(!WBNAME == "Squantz Pond" & SHAPE_Length > 5100)
fivenum(candlewood_lake$SHAPE_Length)
##just a test plot
ggplot() +
geom_sf(data = candlewood_lake, fill = "lightblue", color = "darkblue") +
labs(
title = "Candlewood Lake Base Layer",
x = "Longitude",
y = "Latitude"
) +
theme_minimal()
library(sp)
library(plotGoogleMaps)
install.packages("plotGoogleMaps")
library(sp)
install.packages("plotGoogleMaps")
library(plotGoogleMaps)
library(plotGoogleMaps)
library(plotGoogleMaps)
eight <- read_csv("transect_data/csv/2008.csv")
eight = eight[-1,]
?st_as_sf
